// Code generated by MockGen. DO NOT EDIT.
// Source: pgx.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgxpool "github.com/jackc/pgx/v5/pgxpool"
	zap "go.uber.org/zap"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// L mocks base method.
func (m *MockClient) L() *zap.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "L")
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// L indicates an expected call of L.
func (mr *MockClientMockRecorder) L() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L", reflect.TypeOf((*MockClient)(nil).L))
}

// P mocks base method.
func (m *MockClient) P() *pgxpool.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "P")
	ret0, _ := ret[0].(*pgxpool.Pool)
	return ret0
}

// P indicates an expected call of P.
func (mr *MockClientMockRecorder) P() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "P", reflect.TypeOf((*MockClient)(nil).P))
}
